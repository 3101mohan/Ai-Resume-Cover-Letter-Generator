# src/export.py
# Export helpers: DOCX + PDF

from docx import Document
from io import BytesIO
from fpdf import FPDF

def create_docx_from_text(title: str, body_text: str) -> bytes:
    """Generate a .docx file with heading and paragraphs."""
    doc = Document()
    doc.add_heading(title, level=1)
    for line in body_text.splitlines():
        if line.strip():
            # Check for bullet points (like those generated by the LLM)
            if line.strip().startswith(('-', '‚Ä¢', '*')):
                doc.add_paragraph(line.strip(), style="List Bullet")
            else:
                doc.add_paragraph(line.strip())
        else:
            doc.add_paragraph("")
    bio = BytesIO()
    doc.save(bio)
    bio.seek(0)
    return bio.read()

def create_pdf_from_text(title: str, body_text: str) -> bytes:
    """
    Generate a simple PDF file with title and body text.
    Uses robust text sanitization to ensure compatibility with FPDF's core fonts (like Arial).
    """
    pdf = FPDF()
    pdf.add_page()
    
    # 1. Set standard core font (Arial)
    pdf.set_font("Arial", "B", 16)
    
    # Clean title of emojis/warnings
    cleaned_title = title.replace('üìÑ', '').replace('‚úâÔ∏è', '').replace(' - ', ' ')
    pdf.cell(0, 10, cleaned_title, ln=True, align="C")

    # Set body font
    pdf.set_font("Arial", "", 12)
    pdf.set_auto_page_break(auto=True, margin=15)
    
    # Process text line by line
    for line in body_text.splitlines():
        
        # Robustly clean the line of all problematic Unicode characters 
        cleaned_line = line.replace('‚ö†', '(Warning)').replace('‚ö†Ô∏è', '(Warning)')
        cleaned_line = cleaned_line.replace('üìÑ', '').replace('‚úâÔ∏è', '')
        cleaned_line = cleaned_line.replace('‚Ä¢', '-') # Replace Unicode bullet with ASCII hyphen
        
        if cleaned_line.strip():
            # If multi_cell fails due to remaining Unicode, fall back to ignoring ASCII errors
            try:
                pdf.multi_cell(0, 8, cleaned_line.strip())
            except Exception:
                # Fallback: encode to ASCII and ignore any remaining non-supported characters
                ascii_line = cleaned_line.encode('ascii', 'ignore').decode('ascii')
                pdf.multi_cell(0, 8, ascii_line.strip())
                 
        if not cleaned_line.strip():
             pdf.ln(2) # Add a small space for blank lines
            
    bio = BytesIO()
    pdf.output(bio)
    bio.seek(0)
    return bio.read()